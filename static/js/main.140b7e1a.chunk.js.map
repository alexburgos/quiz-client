{"version":3,"sources":["utils/index.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["getOptions","method","credentials","cache","headers","Headers","Content-Type","X-Requested-With","submitAnswer","questionId","answer","setAnsweredQuestions","console","log","fetch","concat","then","response","ok","json","Error","status","data","correctAnswer","toLowerCase","catch","err","alert","error","Question","props","questionText","choices","_useState","useState","_useState2","Object","slicedToArray","inputState","setInputState","react_default","a","createElement","className","map","choice","i","key","onClick","type","value","placeholder","onChange","e","target","length","disabled","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getQuestions","setState","questions","isLoadingQuestions","originalQuestionLength","randomizeQuestion","_this$state","state","isLoadingNextQuestion","randomNum","Math","floor","random","currentQuestion","showNextQuestion","_this$state2","answeredQuestionIds","unansweredQuestions","filter","question","includes","id","correct","correctAnswers","answered","toConsumableArray","push","_this$state3","src_components_Question","window","location","reload","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.140b7e1a.chunk.js","sourcesContent":["export const getOptions = {\n  method: 'GET',\n  credentials: 'same-origin',\n  cache: 'no-cache',\n  headers: new Headers({\n    'Content-Type': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  })\n};\n\nexport const postOptions = {\n  method: 'POST',\n  credentials: 'same-origin',\n  cache: 'no-cache',\n  headers: new Headers({\n    'Content-Type': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  })\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Question.css';\nimport { getOptions } from '../utils';\n\nfunction submitAnswer( questionId, answer , setAnsweredQuestions) {\n  console.log(questionId, answer);\n  fetch(`https://futu-quiz-api.now.sh/answer/${questionId}`, getOptions)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error(response.status);\n    })\n    .then(data => {\n      let correctAnswer;\n\n      //normalize answer input with answer from the server\n      if (data.answer.toLowerCase() === answer.toLowerCase()) {\n        console.log('Correct!');\n        correctAnswer = true;\n      } else {\n        console.log('Womp Womp!');\n        correctAnswer = false;\n      }\n      setAnsweredQuestions(questionId, correctAnswer)\n    })\n    .catch((err) => {\n      alert('Error fetching questions')\n      console.error(err);\n    });\n}\n\nconst Question = props => {\n  let {\n    questionId,\n    questionText,\n    choices,\n    setAnsweredQuestions\n  } = props;\n\n  const [inputState, setInputState] = useState('');\n\n  return (\n    <div className=\"Question\">\n      <h2 className=\"Question-text\">{questionText}</h2>\n      {choices ?\n        <ul className=\"Question-choices\">\n          {choices.map((choice, i) => <li key={i} onClick={() => submitAnswer(questionId, choice, setAnsweredQuestions) }>{choice}</li>)}\n        </ul>\n        :\n        <div className=\"Question-input\">\n          <input type=\"text\" value={inputState} placeholder=\"What is your answer?\" onChange={(e) => setInputState(e.target.value)} />\n          <button onClick={inputState.length > 0 ? () => submitAnswer(questionId, inputState, setAnsweredQuestions) : null } disabled={inputState.length === 0 ? true : false}>Submit Answer</button>\n        </div>\n      }\n    </div>\n  );\n};\n\nQuestion.propTypes = {\n  questionId: PropTypes.number,\n  questionText: PropTypes.string,\n  choices: PropTypes.array,\n  setAnsweredQuestions: PropTypes.func\n};\n\nexport default Question;","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport { getOptions } from './utils';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questions: [],\n      currentQuestion: null,\n      isLoadingQuestions: true,\n      correctAnswers: 0,\n      originalQuestionLength: 0,\n      answeredQuestionIds: [],\n      isLoadingNextQuestion: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    fetch(`https://futu-quiz-api.now.sh/questions`, getOptions)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error(response.status);\n      })\n      .then(data => {\n        this.setState({\n          questions: data,\n          isLoadingQuestions: false,\n          originalQuestionLength: data.length\n        }, this.randomizeQuestion);\n      })\n      .catch((err) => {\n        alert('Error fetching questions')\n        console.error(err);\n      });\n  };\n\n  randomizeQuestion = () => {\n    let { \n      questions,\n      isLoadingNextQuestion\n    } = this.state;\n    if (questions.length === 0) {\n      this.setState({ \n        currentQuestion: null,\n        isLoadingNextQuestion: false\n      })\n      return;\n    }\n\n    let randomNum = Math.floor(Math.random() * questions.length);\n    this.setState({ \n      currentQuestion: questions[randomNum],\n      isLoadingNextQuestion: isLoadingNextQuestion ? false : isLoadingNextQuestion\n    });\n  }\n\n  showNextQuestion = () => {\n    let {\n      questions,\n      answeredQuestionIds\n    } = this.state;\n\n    let unansweredQuestions = questions.filter( question => !answeredQuestionIds.includes(question.id))\n    this.setState({\n      questions: unansweredQuestions,\n    }, this.randomizeQuestion);\n  }\n\n  setAnsweredQuestions = (questionId, correct) => {\n    let { correctAnswers } = this.state;\n    let answered = [...this.state.answeredQuestionIds];\n\n    answered.push(questionId);\n\n    console.log(answered, this.state.isLoadingNextQuestion);\n\n    this.setState({\n      answeredQuestionIds: answered,\n      correctAnswers: correct ? correctAnswers + 1 : correctAnswers,\n      isLoadingNextQuestion: true,\n    }, this.showNextQuestion);\n  }\n\n  render() {\n    let {\n      currentQuestion,\n      isLoadingQuestions,\n      isLoadingNextQuestion,\n      answeredQuestionIds,\n      correctAnswers,\n      originalQuestionLength\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Totally Random Trivia</h1>\n        </header>\n\n        {!isLoadingQuestions && !isLoadingNextQuestion && currentQuestion &&\n          <Question \n            choices={currentQuestion.choices} \n            questionId={currentQuestion.id} \n            questionText={currentQuestion.question}\n            setAnsweredQuestions={this.setAnsweredQuestions}\n          />\n        }\n        {isLoadingQuestions &&\n          <div className=\"App-loading\">\n            <span>Loading Questions...</span>\n            <span className=\"App-loading-icon\">&#9881;</span>\n          </div>\n        }\n\n        {isLoadingNextQuestion &&\n          <div className=\"App-loading\">\n            <span>Loading Next Question...</span>\n            <span className=\"App-loading-icon\">&#9881;</span>\n          </div>\n        }\n\n        {!isLoadingQuestions && !isLoadingNextQuestion && answeredQuestionIds.length >= originalQuestionLength &&\n          <div className=\"App-results\">\n            <p>Congrats on finishing the quiz! You had {correctAnswers} correct answers.</p>\n            <button onClick={() => window.location.reload() }>Want to try again?</button>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}